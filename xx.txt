#define FCY 4000000ULL
#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <stdbool.h>
#include <libpic30.h>
#include "app.h"

#define ONE_VOLT 310
#define ONE_TENTH_VOLT 31
#define ONE_HUNDREDTH_VOLT 3

void Update_LCD ( void ) ;
void SYS_Initialize ( void ) ;
extern void ConvertADCVoltage ( unsigned int  ) ;
extern void Hex2Dec ( unsigned char ) ;

APP_DATA appData = 
{
                    .messageLine1 = "----REKLAMA-----",
                    .messageLine2 = "PressS3 to start",
                    .messageTime  = "  JAKIS SKLEP   ",
                    .messageADC   = "---ZAPRASZAMY---",
                    .mess     = "  SPRZEDAJEMY   ",
                    .mess2   = "  NAPOJE ZIMNE  ",
                    .mess3     = "  CALODOBOWWO   ",
                    .mess4        = "                ",
} ;

void SPACED(void) 
{
	LCD_PutString((char *) & appData.mess4, sizeof (appData.mess4));
    __delay_ms(300)
    LCD_PutString((char *) & appData.mess4, sizeof (appData.mess4));
}

void LCD_1(void)
{
    for(int i = 0; i < 2; i++)
    {
        LCD_PutString((char *) & appData.mess, sizeof (appData.mess));
        __delay_ms(1000);
        LCD_PutString((char *) & appData.mess2, sizeof (appData.mess2));
    }
}

void LCD_2(void) 
{
	char stageDOWN2[30][160] = 
    {
		"dobre ceny      ",
		" dobre ceny     ",
		"  dobre ceny    ",
		"   dobre ceny   ",
		"    dobre ceny  ",
		"      dobre ceny",
		"y      dobre cen",
		"ny      dobre ce",
		"eny      dobre c",
		"ceny       dobre",
		"e ceny      dobr",
		"re ceny      dob",
		"bre ceny      do",
		"obre ceny      d",
		"dobre ceny      ",
        " dobre ceny     ",
		"  dobre ceny    ",
		"   dobre ceny   ",
		"    dobre ceny  ",
		"     dobre ceny ",
		"      dobre ceny",
		"y      dobre cen",
		"ny      dobre ce",
		"eny      dobre c",
		"ceny       dobre",
		"e ceny      dobr",
		"re ceny      dob",
		"bre ceny      do",
		"obre ceny      d",
		"dobre ceny      ",
	};
    
	for (int i = 0; i < 30; i++) 
    {
        __delay_ms(200);
		LCD_PutString((char *) & appData.mess3, sizeof (appData.mess3));
		LCD_PutString((char *) & stageDOWN2[i], sizeof (stageDOWN2));
	}
    SPACED();
}

void LCD_3(void) 
{
	for(int i = 0; i < 1; i++)
    {
    LCD_PutChar ( '-' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( 'T' );
	LCD_PutChar ( 'a' );
	LCD_PutChar ( 'n' );
	LCD_PutChar ( 'i' );
	LCD_PutChar ( 'o' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
    __delay_ms(1000);
    SPACED();
    
	LCD_PutChar ( '-' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( 'S' );
	LCD_PutChar ( 'z' );
	LCD_PutChar ( 'y' );
	LCD_PutChar ( 'b' );
	LCD_PutChar ( 'k' );
	LCD_PutChar ( 'o' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
    __delay_ms(1000);
    SPACED();
    
    LCD_PutChar ( '-' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( 'T' );
	LCD_PutChar ( 'a' );
	LCD_PutChar ( 'n' );
	LCD_PutChar ( 'i' );
	LCD_PutChar ( 'o' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
    __delay_ms(1000);
    SPACED();
    
	LCD_PutChar ( '-' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( 'S' );
	LCD_PutChar ( 'z' );
	LCD_PutChar ( 'y' );
	LCD_PutChar ( 'b' );
	LCD_PutChar ( 'k' );
	LCD_PutChar ( 'o' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
	LCD_PutChar ( ' ' );
    __delay_ms(1000);
    SPACED();
    }
}

int main ( void )
{
    SYS_Initialize ( ) ;

    LCD_PutString ( (char*) &appData.messageLine1[0] , sizeof (appData.messageLine1 ) - 1  ) ;
    LCD_PutString ( (char*) &appData.messageLine2[0] , sizeof (appData.messageLine2 ) - 1  ) ;

    while (!BUTTON_IsPressed ( BUTTON_S3 )) ;

    TIMER_SetConfiguration ( TIMER_CONFIGURATION_RTCC ) ;

    ADC_SetConfiguration ( ADC_CONFIGURATION_AUTO_SAMPLE_CONVERT ) ;
	
    LCD_PutString ( (char*) &appData.messageTime[0] , sizeof (appData.messageTime ) - 1 ) ;
    LCD_PutString ( (char*) &appData.messageADC[0] , sizeof (appData.messageADC ) - 1 ) ;

    while ( 1 )
    {
        if ( appData.rtc_lcd_update )
        {
            Hex2Dec ( appData.hours ) ;
            appData.rtc_lcd_update = 0 ;

            if ( appData.adc_lcd_update )
            {
                LCD_1();
                LCD_2();
                __delay_ms(1000)
                LCD_3();
                appData.adc_lcd_update = 0 ;
            }

        }
    } ;
}
void Update_LCD ( void )
{
    LCD_PutChar ( 'T' ) ;
    LCD_PutChar ( 'i' ) ;
    LCD_PutChar ( 'm' ) ;
    LCD_PutChar ( 'e' ) ;
    LCD_PutChar ( ' ' ) ;
    LCD_PutChar ( appData.tens + 0x30 ) ;
    LCD_PutChar ( appData.ones + 0x30 ) ;

    Hex2Dec ( appData.minutes ) ;
    LCD_PutChar ( ':' ) ;
    LCD_PutChar ( ' ' ) ;
    LCD_PutChar ( appData.tens + 0x30 ) ;
    LCD_PutChar ( appData.ones + 0x30 ) ;

    Hex2Dec ( appData.seconds ) ;
    LCD_PutChar ( ':' ) ;
    LCD_PutChar ( ' ' ) ;
    LCD_PutChar ( appData.tens + 0x30 ) ;
    LCD_PutChar ( appData.ones + 0x30 ) ;

}

void ConvertADCVoltage ( unsigned int adc_conv_data )
{
    appData.adones = 0 ;
    appData.adtens = 0 ;
    appData.adhunds = 0 ;
    appData.adthous = 0 ;

    while ( adc_conv_data > 0 )
    {
        if ( adc_conv_data > ( ONE_VOLT - 1 ) )
        {
            appData.adones++ ;

            adc_conv_data -= ONE_VOLT ;
        }

        else if ( adc_conv_data > ( ONE_TENTH_VOLT - 1 ) )
        {
            if ( appData.adtens < 9 )
            {
                appData.adtens++ ;
            }
            else
            {
                appData.adones++ ;

                appData.adtens = 0 ;
            }

            adc_conv_data -= ONE_TENTH_VOLT ;
        }
	    
        else if ( adc_conv_data > ( ONE_HUNDREDTH_VOLT - 1 ) )
        {
            if ( appData.adhunds < 9 )
            {
                appData.adhunds++ ;
            }
            else
            {
                appData.adtens++ ;

                appData.adhunds = 0 ;
            }

            adc_conv_data -= ONE_HUNDREDTH_VOLT ;
        }

        else if ( adc_conv_data <= ( ONE_HUNDREDTH_VOLT - 1 ) )
        {
            appData.adthous++ ;
            adc_conv_data -- ;
        }
    }

    appData.adones += 0x30 ;
    appData.adtens += 0x30 ;
    appData.adhunds += 0x30 ;
    appData.adthous += 0x30 ;
}

void Hex2Dec ( unsigned char count )
{
    appData.hunds = 0 ;
    appData.tens  = 0 ;
    appData.ones = 0 ;

    while ( count >= 10 )
    {

        if ( count >= 200 )
        {
            count -= 200 ;
            appData.hunds = 0x02 ;
        }

        if (count >= 100)
        {
            count -= 100 ;
            appData.hunds++ ;
        }

        if (count >= 10 )
        {
            count -= 10 ;
            appData.tens++ ;
        }
    }

    appData.ones = count ;
}